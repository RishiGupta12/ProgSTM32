.TH PROGSTM32 1
.SH NAME
progstm32 \- flashes firmware in stm32 memory through serial port

.SH SYNOPSIS
.B progstm32
-d port [\-{r|w} filename] [\-{bn|ih}] [\-e {m | start total}] [\-s address] [\-l length] [\-kopjnizvhR] [\-br baudrate] [\-g address] [\-{er|ex} \-{dtr|rts} {0|1} {0|1} \-{dtr|rts} {0|1} {0|1}] [-L {en|fr|ko|it|de|zh|ja}]

.SH DESCRIPTION
.B progstm32
progstm32 utility is used to erase, write and read user flash memory and option 
bytes in stm32 microcontollers. It is based on progstm32 sdk which is a java library 
that can be included in any Java application. This SDK enables GUI programs to give 
an option in menu to let user upgrade firmware in their product.

.SH OPTIONS
.TP
.B \-d   port
Serial port to which stm32 is connected (/dev/ttyUSB0 or COM9). When this port is opened, both input and output buffers of serial port is cleared.

.TP
.B \-br  baudrate
Serial port speed (default 115200, supported 2400, 4800, 9600, 14400, 19200, 28800, 38400, 56000, 57600, 115200).

.TP
.B \-r   filename|stdout
Reads length bytes specified by -l from the address specified by -s and stores in file or stdout.

.TP
.B \-w   filename
Firmware file to be flashed into memory.

.TP
.B \-bn
Indicates file specified with -w is in plain binary format.

.TP
.B \-ih
Indicates file specified with -w is in intel hex format and needs conversion into binary format.

.TP
.B \-v
Verify after flashing firmware in memory.

.TP
.B \-e   m		       
Do mass erase of user flash memory.

.TP
.B \-e   start total
Erase total pages given by 'total', starting with 'start' page number.

.TP
.B \-s   address
Address in hexadecimal format without leading 0x (address in stm32 memory from where flashing will start or data will be read).

.TP
.B \-l   length
Number of bytes (used mainly with read command).

.TP
.B \-i
Get bootloader ID (version of the STM32 device bootloader).

.TP
.B \-z
Get bootloader protocol version (version of the serial peripheral communication protocol used in the bootloader).

.TP
.B \-p
Get stm32 product ID.

.TP
.B \-k
Disable memory read protection. Application with re-init communication with bootloader automatically after finishing executing this command.

.TP
.B \-j
Enable memory read protection. Application with re-init communication with bootloader automatically after finishing executing this command.

.TP
.B \-o
Disable memory write protection. Application with re-init communication with bootloader automatically after finishing executing this command.

.TP
.B \-n  start total
Enable memory write protection on total 'pages' starting from 'start' page. Application with re-init communication with bootloader automatically after finishing executing this command.

.TP
.B \-R
Do software based system reset.

.TP
.B \-g   address
Make program counter jump to the given address.

.TP
.B \-er \-dtr a b \-rts c d
Sequence that should be executed to make stm32 enter bootloader mode. The a,b,c,d can be 1 or 0. If dtr is given before rts, DTR signal will be set 1st otherwise RTS signal will be set first. A signal line is toggled only if its previous value was different. There is no restriction as to whether DTR or RTS is connected to BOOT0 or NRST pin.

.TP
.B \-ex \-dtr a b \-rts c d
Sequence that should be executed to make stm32 exit bootloader mode. The a,b,c,d can be 1 or 0. If dtr is given before rts, DTR signal will be set 1st otherwise RTS signal will be set first. A signal line is toggled only if its previous value was different. There is no restriction as to whether DTR or RTS is connected to BOOT0 or NRST pin. Exit sequence is also executed whenever an error occurs while executing some command and application is going to return due to this.

.TP
.B \-t hold time
Time in milli-seconds for which the DTR and RTS line will be kept in previous state when switching to next state. For example; for option like this "-er -dtr 0 0 -rts 1 0 -t 10", when RTS is switched from 1 to 0, RTS will be kept in state 1 and DTR will be kept in state 0 for 10 milli-seconds. Suppose RTS is connected to reset pin (NRST) of stm32, then reset will be asserted for 10 milli-seconds.

.TP
.B \-L  language
Sets language to use. Default is English. Set to fr for french, ko for korean, it for italian, de for german, zh for chinese, ja for japanese and en for english.

.TP
.B \-h
Show this help

.SH EXAMPLES
1. Get stm32 product ID.
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-p
.PD
.RE

2. Get stm32 bootloader ID.
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-i
.PD
.RE

3. Disable memory read protection of stm32
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-k
.PD
.RE

4. Disable memory write protection of stm32
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-o
.PD
.RE

5. Mass erase user flash.
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-e m
.PD
.RE

6. Page by page erase; erase 5 pages starting with page number 0
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-e 0 5
.PD
.RE

7. Flash binary format firmware file fw.bin at hexadecimal address 08000000
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-w fw.bin \-s 08000000 \-bn
.PD
.RE

8. Flash intel hex format firmware file fw.hex at hexadecimal address 08000000
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-w fw.hex \-s 08000000 \-ih
.PD
.RE

9. Flash firmware and verify by reading memory back at hexadecimal address 08000000
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-w fw.bin -s 08000000 \-bn \-v
.PD
.RE

10. First erase, then flash firmware file fw.hex and then verify.
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-e m \-w fw.hex \-s 08000000 \-ih \-v
.PD
.RE

11. Read 1024 bytes from hexadecimal address 08000000 and print on stdout.
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-r stdout \-s 08000000 \-l 1024
.PD
.RE

12. Read 1024 bytes from hexadecimal address 08000000 and save in file readfw.bin in file system.
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-r readfw.bin \-s 08000000 \-l 1024
.PD
.RE

13. Enable memory read protection of stm32.
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-k
.PD
.RE

14. Enable memory write protection of stm32.
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-o
.PD
.RE

15. Make program counter jump to hexadecimal address 08000000 through go command.
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-g 08000000
.PD
.RE

16. Trigger system reset through software ARM instruction.
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-R
.PD
.RE

17. Get stm32 bootloader communication protocol version.
.RS
.PD 0
.P
progstm32 \-d /dev/ttyS0 \-z
.PD
.RE

.SH REPORTING BUGS
Bugs can be reported by creating issues in the issues section of the source code repository.

.SH SEE ALSO
Factory bootloader in stm32 uses a predefined protocol for communication with host computer. Following application notes should be consulted to know how to enter and exit bootloader mode, communication protocol, product specific requirements and behaviour of commands etc.

.RS 0
AN2606: STM32 microcontroller system memory boot mode
.RE
.RS 0
AN3155: USART protocol used in the STM32 bootloader
.RE

.SH AUTHORS
The
.B progstm32
is developed and maintained by
.IR "Rishi Gupta <gupt21@gmail.com>"

.SH COPYRIGHT
Copyright (C) 2018, Rishi Gupta. All rights reserved.

.SH LICENSE
.B progstm32
is distributed under GNU Lesser General Public License Version 2.1. Copy of the license is available in source code repository in the file "LICENSE".
